#+TITLE: МДК 02.02 Инструментальные средства разработки
#+AUTHOR: Панков Вася
#+TEACHER: Опалева У.С.
#+LANGUAGE: ru

* Лабораторная работа №2-4

Тема: Разработка структуры проекта. Диаграмма модулей. Перечень артефактов и протоколов. Настройка работы системы контроля версий. Разработка проекта на основании шаблона. 

Цель: создание модульной структуры проекта в виде диаграммы, разработка перечня артефактов (основных файлов) и протоколов, настройка Git 


Выполнение работы:

​1. Требуется создать веб-приложение (сайт) на основе имеющегося шаблона. Выбрать Файл > Создать > Проект (Create a new project). Далее в открывшемся окне выбрать Bottle Web Project и нажать Next: 

Задать название проекта (в наименование должна быть включена фамилия студента) > Create.

#+CAPTION: Создание решения
[[file:images/20230323-120448_screenshot.png]]


​2. По умолчанию в редакторе кода откроется файл app.py. Для корректной интерпретации содержимого файла requirements.txt будет предложено создать виртуальное окружение.

#+CAPTION: Создание виртуальной среды
[[file:images/20230323-120529_screenshot.png]]

#+CAPTION: Неудачная разработка среды
[[file:images/20230323-121117_screenshot.png]]



​3. Ознакомиться со структурой проекта, открыв Обозреватель решений (Solution Explorer): 

В папке static содержатся стилевые css-файлы для оформления внешнего вида веб-страниц, шрифтовые наборы и js-скрипты. 

Выбрав для просмотра файлы из папки views, можно убедиться, что они представляют собой макеты веб-страниц: главной (index.tpl), о нас (about.tpl), контакты (contact.tpl),
а файл layout.tpl – не что иное, как шаблон обёртки с панелью навигации, содержащей четыре гиперссылки: Application name, Home, About, Contact в «шапке» сайта и небольшим «подвалом».

#+ATTR_LATEX: :height 10cm
#+CAPTION: Структура проекта
[[file:images/20230323-120758_screenshot.png]]

#+CAPTION: Удачная установка
[[file:images/20230323-121247_screenshot.png]]


​4. Выполнить запуск проекта

#+CAPTION: Запуск проекта
[[file:images/20230323-121321_screenshot.png]]


​​​5. Например, вместо текста заголовка «Bottle» на главной (домашней) странице требуется разместить картинку.
   Для этого сначала в структуре каталога static создаётся папка images, в которую копируется файл изображения logo_nav.png.
   Затем в коде index.tpl удалить строку <h1> Bottle </h1>, добавить <img src="static\images\logo_nav.png">
   (файл изображения можно скачать с сайта http://bottlepy.org/docs/dev/index.html) и пустой абзац <p> </p>

#+CAPTION: Отображение сайта
[[file:images/20230323-122110_screenshot.png]]

#+CAPTION: Изменения кода
[[file:images/20230323-122156_screenshot.png]]


​6. Требуется создать веб-приложение (тематический сайт) на основе шаблона фреймворка Bottle. Придерживаться следующих этапов:  

  - Выбрать тематику приложения, согласовать с преподавателем (темы не повторяются!).

    ReportViwer - сайт для просмотра отчётов

  - Подобрать текстовые и графические (иллюстрации, иконки, карты) материалы для сайта.

    Был разработан дизайн в Figma:

    #+CAPTION: Warframe
    [[file:images/20230323-122737_screenshot.png]]


    #+CAPTION: Дизайн в Figma
    [[file:images/20230323-122438_screenshot.png]]



  - Построить UML-диаграмму компонентов приложения (css-файлы считать одним укрупнённым структурным компонентом, аналогично js-скрипты, их подключение осуществляется в файле layout.tpl).

    #+CAPTION: UML-диаграммы
    [[file:images/2023-04-05_10-35-52_screenshot.png]]


  - Настроить Git. Хранение проекта осуществлять в репозитории на Github одного из участников, остальные клонируют проект в свой локальный репозиторий. Распределить задачи редактирования файлов шаблонов между членами команды. Изменить содержимое этих файлов согласно выбранной тематике (ссылки на кнопках поставить на нужные страницы похожих по тематике сайтов).

    Репозитоий был создан мной на GitHub

    #+DOWNLOADED: screenshot @ 2023-04-05 09:33:51
    [[file:images/2023-04-05_09-33-51_screenshot.png]]

  - Вести контроль версий. Синхронизировать все локальные изменения с удалённым репозиторием на Github.

    В итоге были получены такие изменения от всех пользователей:
    #+CAPTION: Изменения от всех пользователей
    [[file:images/2023-04-05_09-35-15_screenshot.png]]

    Моя часть работы состояла, в создание основной части приложения, то есть редактора текстовых документов:
    - Вид без авторизации:
      
      #+CAPTION: Вид, без авторизации
      [[file:images/2023-04-05_09-41-07_screenshot.png]]

    - Вид, после авторизации, с выбранным файлом
      #+CAPTION: Просмотр текстового файла
      [[file:images/2023-04-05_09-42-23_screenshot.png]]

    - Просмотр картинки
      #+CAPTION: Просмотр картинок
      [[file:images/2023-04-05_09-43-05_screenshot.png]]

  - Заполнить файл README.md. Примерный вариант описания можно найти в шаблоне https://gist.github.com/PurpleBooth/109311bb0361f32d87a2 или по ссылке https://github.com/Sinclear/default_readme
    #+CAPTION: README файл
    [[file:images/2023-04-05_10-36-38_screenshot.png]]


Листинг программы:

app.py

#+INCLUDE: ./report_viewer/app.py src python

routes.py

#+INCLUDE: ./report_viewer/routes.py src python

general.css

#+INCLUDE: ./report_viewer/static/styles/general.css src text





Контрольные вопросы:
1. Каково основное назначение UML-диаграмм и их роль в разработке приложений?

   Основное назначение UML-диаграмм и их роль в разработке приложений заключается в хорошем проектировании приложения перед его непосредственным кодированием. 
2. Можно ли считать артефактами веб-страницы сайта? Обоснуйте ответ

   Да, веб-страницы сайта можно считать артефактами, так как это информационные элементы, которые тем или иным способом используются при работе программной системы и входят в ее состав.
3. Предпочтительнее ли протокол HTTPS протоколу HTTP? Почему (да / нет)?

   Да, так как протокол HTTPS является расширением протокола HTTP, добавляющий поддержку шифрования в целях повышения безопасности. Также протокол HTTPS является стандартом даже для не самых крупных сайтов сейчас. 
4. Что значит код ответа сервера «200»? Какие ещё группы и коды ответов вы знаете (привести по 1-2 примера из каждой группы)?

   Коды сгруппированы в 5 классов:
   1. Информационные 100 – 199

      101 Switching Protocol "В обработке". Этот код указывает, что сервер получил запрос и обрабатывает его, но обработка ещё не завершена.

      100 Continue "Продолжить". Этот промежуточный ответ указывает, что запрос успешно принят и клиент может продолжать присылать запросы либо проигнорировать этот ответ, если запрос был завершён.

   2. Успешные 200 – 299

      200 OK "Успешно". Запрос успешно обработан. Что значит "успешно", зависит от метода HTTP, который был запрошен.

      202 Accepted "Принято". Запрос принят, но ещё не обработан. Не поддерживаемо, т.е., нет способа с помощью HTTP отправить асинхронный ответ позже, который будет показывать итог обработки запроса. Это предназначено для случаев, когда запрос обрабатывается другим процессом или сервером, либо для пакетной обработки.

   3. Перенаправления 300 – 399

      301 Moved Permanently "Перемещён на постоянной основе". Этот код ответа значит, что URI запрашиваемого ресурса был изменён. Возможно, новый URI будет предоставлен в ответе.

      304 Not Modified "Не модифицировано". Используется для кеширования. Это код ответа значит, что запрошенный ресурс не был изменён. Таким образом, клиент может продолжать использовать кешированную версию ответа.

   4. Клиентские ошибки 400 – 499

      400 Bad Request "Плохой запрос". Этот ответ означает, что сервер не понимает запрос из-за неверного синтаксиса.

      401 "Неавторизованно". Для получения запрашиваемого ответа нужна аутентификация. Статус похож на статус 403, но, в этом случае, аутентификация возможна.

   5. Серверные ошибки 500 – 599

      500 Internal Server Error "Внутренняя ошибка сервера". Сервер столкнулся с ситуацией, которую он не знает, как обработать.

      504 Gateway Timeout Этот ответ об ошибке предоставляется, когда сервер действует как шлюз и не может получить ответ вовремя.

5. Какую систему защиты и сертификации данных использует Git по умолчанию?

   По умолчанию Git использует для защиты и сертификации данных систему SSH.
6. Что значит «клонировать» репозиторий в терминах Git?

   «Клонировать» репозиторий в терминах Git означает полный перенос удалённого репозитория на локальную машину с помощью команды git clone.
